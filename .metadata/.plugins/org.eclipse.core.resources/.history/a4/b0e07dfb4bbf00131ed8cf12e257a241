package com.thinkjs.io;

import java.util.Stack;

import edu.princeton.cs.introcs.StdIn;
import edu.princeton.cs.introcs.StdOut;

public class ComputeExpression {

	
	public static void main(String[] args) {
		
		/*Stack<String> ops = new Stack<String>();
		Stack<Double> vals = new Stack<Double>();
		//String s = "(2+4)";
		//int c = s.length();
		while(!StdIn.isEmpty()){
			String s = StdIn.readString();
			if(s.equals("(")) ;
			else if (s.equals("+"))  ops.push(s);
			else if (s.equals("-")) ops.push(s);
			else if (s.equals("*")) ops.push(s);
			else if (s.equals("/")) ops.push(s);
			else if (s.equals("sqrt")) ops.push(s);
			else if (s.equals(")")){
				String op = ops.pop();
				Double val = vals.pop();
				if(op.equals("+")) val = vals.pop() + val;
				else if(op.equals("-")) val = vals.pop() - val;
				else if(op.equals("*")) val = vals.pop() * val;
				else if(op.equals("/")) val = vals.pop() / val;
				else if(op.equals("sqrt")) val = Math.sqrt(val);
				vals.push(val);
			}
			else
				vals.push(Double.parseDouble(s));
			
		}
		StdOut.println(vals.pop());*/
		Stack<String> ops = new Stack<String>();
		Stack<Double> vals = new Stack<Double>();
		while (!StdIn.isEmpty())
		{ // Read token, push if operator.
		String s = StdIn.readString();
		if
		(s.equals("("))
		;
		else if (s.equals("+"))
		ops.push(s);
		else if (s.equals("-"))
		ops.push(s);
		else if (s.equals("*"))
		ops.push(s);
		else if (s.equals("/"))
		ops.push(s);
		else if (s.equals("sqrt")) ops.push(s);
		else if (s.equals(")"))
		{ // Pop, evaluate, and push result if token is ")".
		String op = ops.pop();
		double v = vals.pop();
		if
		(op.equals("+"))
		v = vals.pop() + v;
		else if (op.equals("-"))
		v = vals.pop() - v;
		else if (op.equals("*"))
		v = vals.pop() * v;
		else if (op.equals("/"))
		v = vals.pop() / v;
		else if (op.equals("sqrt")) v = Math.sqrt(v);
		vals.push(v);
		} // Token not operator or paren: push double value.
		else vals.push(Double.parseDouble(s));
		}
		StdOut.println(vals.pop());
		}
	}

}
